import Head from "next/head";
import Image from "next/image";
import Link from "next/link";
import { Inter } from "@next/font/google";
import { GetServerSideProps, InferGetServerSidePropsType } from "next";
import { useRouter } from "next/router";
import { FormEventHandler, useCallback, useRef } from "react";

const inter = Inter({ subsets: ["latin"], variable: "--inter-font" });

type Repository = {
  name: string;
  description: string;
};

type Data =
  | { type: "prompt"; url: string | null }
  | { type: "result"; repository: Repository };

const parseUrlParam = (
  urlParam: string | string[] | undefined
): string | null => {
  if (!urlParam) return null;

  return Array.isArray(urlParam) ? urlParam[0] : urlParam;
};

const repositoryUrlRegex =
  /https:\/\/github.com\/(?<owner>[^\/]+)\/(?<repo>[^\/]+)\/?/;

const extractRepositoryInfoFromUrl = (
  url: string
): { owner: string; repo: string } | null => {
  const [match, owner, repo] = repositoryUrlRegex.exec(url) || [];

  if (!match) return null;

  return {
    owner,
    repo,
  };
};

export const getServerSideProps: GetServerSideProps<
  Data,
  { url: string }
> = async (context) => {
  const url = parseUrlParam(context.query.url);

  if (!url) return { props: { type: "prompt", url } };

  const repositoryInfo = extractRepositoryInfoFromUrl(url);

  if (!repositoryInfo) return { props: { type: "prompt", url } };

  const response = await fetch(
    `https://api.github.com/repos/${repositoryInfo.owner}/${repositoryInfo.repo}`
  );

  if (!response.ok) {
    return {
      props: {
        type: "prompt",
        url,
      },
    };
  }

  return {
    props: {
      type: "result",
      repository: (await response.json()) as Repository,
    },
  };
};

export default function Home(
  props: InferGetServerSidePropsType<typeof getServerSideProps>
) {
  const router = useRouter();
  const urlInputRef = useRef<HTMLInputElement>(null);

  const handleSubmit = useCallback<FormEventHandler<HTMLFormElement>>(
    (e) => {
      e.preventDefault();

      router.push({
        pathname: "/",
        query: {
          url: urlInputRef.current?.value,
        },
      });
    },
    [router]
  );

  return (
    <>
      <Head>
        <title>CodeSandbox Kanban</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      {props.type === "prompt" && (
        <main>
          <div>
            <Link href="/">
              <Image
                src="/code-sandbox-logo.svg"
                alt="CodeSandbox Logo"
                width={167.86}
                height={25}
                priority
              />
            </Link>
          </div>
          <form action="/" noValidate onSubmit={handleSubmit}>
            <h1>Start by pasting the repository URL</h1>
            <input
              ref={urlInputRef}
              type="url"
              placeholder="https://"
              name="url"
              defaultValue={props.url || ""}
            />
            <button type="submit">Submit</button>
            {props.url && <p>Oops! Something went wrong. Try again.</p>}
          </form>
        </main>
      )}
      {props.type === "result" && (
        <main>
          <Link href="/">Back</Link>
          <h1>{props.repository.name}</h1>
          <p>{props.repository.description}</p>
        </main>
      )}
    </>
  );
}
